@inherits ComponentWithCancellationToken
@inject IDispatcher Dispatcher
@inject IState<UsersState> State
@inject IUsersClient UsersClient
@inject NotificationsService NotificationsService
@page "/admin/users"


<div class="d-flex justify-content-center">
    <button class="btn btn-primary btn-sm" @onclick="OnAddUserButtonClicked">New user</button>
</div>
<UsersListComponent Users="State.Value.Users" 
        CodeRegenerationClicked="OnCodeRegenerationClicked"
        UserDeleted="OnDeleteUser"
    />


@code {


    [CascadingParameter]
    public IModalService? Modal { get; set; }

    protected override void OnParametersSet()
    {
        Dispatcher.Dispatch(new LoadUsersAction(CancellationToken));
    }


    private async Task OnAddUserButtonClicked()
    {
        var options = new ModalOptions { HideCloseButton = true };

        var messageForm = Modal!.Show<AddNewUserModal>("New User", options);
        var result = await messageForm.Result;

        if (!result.Cancelled)
        {
            Dispatcher.Dispatch(new LoadUsersAction(CancellationToken));
        }
    }

    private async Task OnCodeRegenerationClicked(string userEmail)
    {
        try
        {
            var result = await UsersClient.RegenerateRegistrationCodeAsync(new RegenerateRegistrationCodeCommand { Email = userEmail }, CancellationToken);
            NotificationsService.ShowConfirmation(result.Message);
        }
        catch (ApiException<ProblemDetails> exception)
        {
            NotificationsService.ShowErreur(exception.Result.Detail);
            return;
        }
    }

    private async Task OnDeleteUser(string userEmail)
    {
        var options = new ModalOptions { HideCloseButton = true };
        var parameters = new ModalParameters();
        parameters.Add(nameof(ConfirmDeletionModal.Message), "Are you sure you want to delete this user?");

        var confirmationModal = Modal!.Show<ConfirmDeletionModal>("Confirmation", parameters, options);
        var confimrationResult = await confirmationModal.Result;

        if (confimrationResult.Cancelled)
            return;

        try
        {
            var result = await UsersClient.DeleteUserAsync(userEmail, CancellationToken);
            Dispatcher.Dispatch(new LoadUsersAction(CancellationToken));
            NotificationsService.ShowConfirmation(result.Message);
        }
        catch (ApiException<ProblemDetails> exception)
        {
            NotificationsService.ShowErreur(exception.Result.Detail);
            return;
        }
    }
}
