@inherits ComponentWithCancellationToken
@inject IApiClient ApiClient
@inject NotificationsService NotificationsService


<div style="width:300px">
    <EditForm Model="@_command" OnValidSubmit="@HandleValidSubmit">
        <DataAnnotationsValidator />

        <div class="form-floating mb-3">
            <input type="text" class="form-control shadow-none" id="title" @bind="_command.CategoryName" @bind:event="oninput" aria-describedby="nameHelpBlock"
                   maxlength="@MaxLength(nameof(_command.CategoryName)))" placeholder="Title" />
            <label for="title">Category name</label>
            <div id="nameHelpBlock" class="form-text m-1">
                @_command?.CategoryName?.Length / @(MaxLength(nameof(_command.CategoryName)))
            </div>
            <ValidationMessage For="@(() => _command!.CategoryName)" />
        </div>

        <div style="text-align: center">
            <button type="button" class="btn btn-secondary" @onclick="Cancel">Cancel</button>
            <button type="submit" class="btn btn-primary ms-3">Create</button>
        </div>
    </EditForm>
</div>


@code {
    private CreateCategoryCommand _command { get; set; } = new() { CategoryName = string.Empty };

    [CascadingParameter]
    BlazoredModalInstance BlazoredModal { get; set; } = default!;

    private async Task HandleValidSubmit()
    {
        try
        {
            var result = await ApiClient.CreateCategoryAsync(_command, CancellationToken);
            NotificationsService.ShowConfirmation(result.Message);
            await BlazoredModal.CloseAsync();
        }
        catch (ApiException<ProblemDetails> exception)
        {
            NotificationsService.ShowErreur(exception.Result.Detail);
            return;
        }
    }

    async Task Cancel() => await BlazoredModal.CancelAsync();


    private int MaxLength(string prop) => Utils.MaxLength<CreateCategoryCommand>(prop);
}
