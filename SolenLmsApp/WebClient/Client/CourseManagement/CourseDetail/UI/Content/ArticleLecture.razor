@inherits ComponentWithCancellationToken
@inject IApiClient ApiClient
@inject NotificationsService NotificationsService


<BlazoredTextEditor @ref="@_quillHtml" Placeholder="">
    <ToolbarContent>
        <select class="ql-header">
            <option selected=""></option>
            <option value="1"></option>
            <option value="2"></option>
            <option value="3"></option>
            <option value="4"></option>
            <option value="5"></option>
        </select>
        <span class="ql-formats">
            <button class="ql-bold"></button>
            <button class="ql-italic"></button>
            <button class="ql-underline"></button>
            <button class="ql-strike"></button>
        </span>
        <span class="ql-formats">
            <select class="ql-color"></select>
            <select class="ql-background"></select>
        </span>
        <span class="ql-formats">
            <button class="ql-list" value="ordered"></button>
            <button class="ql-list" value="bullet"></button>
        </span>
        <span class="ql-formats">
            <button class="ql-link"></button>
        </span>
    </ToolbarContent>
</BlazoredTextEditor>


<div class="text-center mt-3">
    <button class="btn btn-primary btn-sm" @onclick="SaveContent">Save</button>
</div>
@code {
    private string? _content { get; set; }

    private BlazoredTextEditor? _quillHtml;

    [Parameter]
    public LectureForGetCourseByIdQueryResult Lecture { get; set; } = default!;

    [Parameter]
    public EventCallback LectureUpdated { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await LoadContent();
    }

    private async Task LoadContent()
    {
        try
        {
            var result = await ApiClient.GetArticleAsync(Lecture.ResourceId, CancellationToken);
            _content = result.Data;
            await this._quillHtml!.LoadHTMLContent(_content);
        }
        catch (ApiException<ProblemDetails> exception)
        {
            NotificationsService.ShowErreur(exception.Result.Detail);
        }
    }

    private async Task SaveContent()
    {
        try
        {
            var content = await this._quillHtml!.GetHTML();

            var response = await ApiClient.UpdateContentAsync(Lecture.ResourceId, new UpdateLectureArticleCommand { Content = content }, CancellationToken);

            NotificationsService.ShowConfirmation(response.Message);

            await LectureUpdated.InvokeAsync();
        }
        catch (ApiException<ProblemDetails> exception)
        {
            NotificationsService.ShowErreur(exception.Result.Detail);
        }
    }
}
