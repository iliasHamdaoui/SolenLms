
<div class="container mt-2 py-5">
    <button type="button" class="btn btn-labeled btn-default mt-2" @onclick="OnCoursesListLinkClicked">
        <span class="btn-label"><i class="fa fa-chevron-left"></i></span><u>Courses List</u>
    </button>
    <div class="text-center mb-5">

        <h2>@Course?.Title</h2>
    </div>
    <div class="row">
        <div class="col-lg-9">
            <div>
                <h4>Description :</h4>
                <p>@Course?.Description</p>
            </div>
            <div>
                <h4>Course Content : </h4>
                @if (Course?.Modules is not null)
                {
                    <div class="accordion" id="accordionPanelsStayOpenExample">
                        @foreach (var module in Course.Modules)
                        {
                            <ModuleComponent Module="module"></ModuleComponent>
                        }
                    </div>
                }
            </div>
        </div>
        <div class="col-lg-3">
            <div class="card bg-light">
                <div class="card-body d-flex flex-column justify-content-between">
                    <h6 class="mb-3"><i class="fas fa-regular fa-user me-1"></i>@Course?.InstructorName</h6>
                    <span class="h6 mb-3"><i class="fas fa-solid fa-hourglass-half me-2"></i>@Course?.Duration.ToHours()</span>
                    <span class="h6 mb-3" style="display:block"><i class="fas fa-solid fa-calendar me-2" title="Published on"></i>@Course?.PublicationDate.ToString("dd/MM/yyyy HH:mm")</span>
                    <div class="d-flex flex-column justify-content-center mb-1">
                        @if (Course?.Categories is not null)
                        {
                            @foreach (var category in Course.Categories)
                            {
                                <div><span class="badge rounded-pill bg-secondary m-1">@category</span></div>
                            }
                        }
                    </div>
                    <div class="mb-3">
                        @if (LearnerProgress > 0)
                        {
                            <div class="progress" style="width:100%">
                                <div class="progress-bar" role="progressbar" style=@($"width: {LearnerProgress}%") aria-valuenow="50" aria-valuemin="0" aria-valuemax="100">@($"{LearnerProgress}%")</div>
                            </div>
                        }
                        else
                        {
                            <div class="progress d-flex flex-column justify-content-center" style="width:100%">
                                <div class="progress-bar" role="progressbar" style="width:0%" aria-valuenow="50" aria-valuemin="0" aria-valuemax="100">0%</div>
                                <span style="align-content:center">0%</span>
                            </div>
                        }
                    </div>
                    <div class="d-flex justify-content-between">
                        @if (Course is not null && Course.IsBookmarked)
                        {
                            <button type="button" class="btn btn-outline-secondary btn-sm" @onclick="ToggleBookmark">
                                <span class="btn-label"><i class="fa-solid fa-bookmark me-1"></i></span>Bookmarked
                            </button>
                        }
                        else
                        {
                            <button type="button" class="btn btn-outline-secondary btn-sm" @onclick="ToggleBookmark">
                                <span class="btn-label"><i class="fa-regular fa-bookmark me-1"></i></span>Bookmark
                            </button>
                        }

                        <button class="btn btn-outline-primary btn-sm" @onclick="OnGoToCourseClicked">Go to course</button>

                    </div>
                </div>
            </div>
        </div>

    </div>

</div>

@code {
    [Parameter]
    public GetCourseByIdQueryResult? Course { get; set; }
    [Parameter]
    public EventCallback<string> BookmarkToggled { get; set; }
    [Parameter]
    public EventCallback CoursesListLinkClicked { get; set; }
    [Parameter]
    public EventCallback GoToCourseClicked { get; set; }

    private async Task ToggleBookmark()
    {
        await BookmarkToggled.InvokeAsync(Course?.CourseId);
    }

    private async Task OnCoursesListLinkClicked()
    {
        await CoursesListLinkClicked.InvokeAsync();
    }
    private async Task OnGoToCourseClicked()
    {
        await GoToCourseClicked.InvokeAsync();
    }


    private float LearnerProgress => Course?.LearnerProgress == null ? 0 : (int)(Course.LearnerProgress * 100);
}
