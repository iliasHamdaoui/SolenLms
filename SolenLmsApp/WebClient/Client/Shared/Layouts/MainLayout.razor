@using Blazored.Toast
@using Blazored.Toast.Configuration
@inherits LayoutComponentBase
@inject IJSRuntime JSRuntime
@inject IDispatcher Dispatcher
@inject IState<SharedState> State
@implements IDisposable

<nav class="navbar navbar-expand-sm bg-dark navbar-dark">

    <div class="container-fluid">
        <AuthorizeView>
            <Authorized>
                <NavLink class="navbar-brand" href="">@State.Value?.OrganizationName</NavLink>
            </Authorized>
            <NotAuthorized>
                <NavLink class="navbar-brand" href="">Solen LMS</NavLink>
            </NotAuthorized>
        </AuthorizeView>

        <div>
            <div class="collapse navbar-collapse" id="collapsibleNavbar">
                <ul class="navbar-nav nav-pills">
                    <AuthorizeView>
                        <li class="nav-item me-3">
                            <NavLink class="nav-link" href="learning" Match=@NavLinkMatch.Prefix>Learning</NavLink>
                        </li>
                    </AuthorizeView>
                    <AuthorizeView Policy="@PoliciesConstants.CourseManagementPolicy">
                        <Authorized>
                            <li class="nav-item me-3">
                                <NavLink class="nav-link" href="course-management" Match=@NavLinkMatch.Prefix>Course Management</NavLink>
                            </li>
                        </Authorized>
                        <NotAuthorized>
                            <RedirectToHome />
                        </NotAuthorized>
                    </AuthorizeView>
                    <AuthorizeView Policy="@PoliciesConstants.AdminPolicy">
                        <Authorized>
                            <li class="nav-item me-3">
                                <NavLink class="nav-link" href="admin/organization" Match=@NavLinkMatch.Prefix>Administration</NavLink>
                            </li>
                        </Authorized>
                        <NotAuthorized>
                            <RedirectToHome />
                        </NotAuthorized>
                    </AuthorizeView>
                </ul>
            </div>

        </div>
        <AuthorizeView>
            <Authorized>
                <div>
                    <ul class="navbar-nav">

                        <li class="nav-item dropdown">
                            <a class="nav-link dropdown-toggle" href="#" role="button" data-bs-toggle="dropdown">@context.User.Identity!.Name</a>
                            <ul class="dropdown-menu">
                                <li><a class="dropdown-item" href="@context.User.FindFirst("bff:logout_url")?.Value">Sign out</a></li>
                            </ul>
                        </li>
                    </ul>
                </div>
                <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#collapsibleNavbar">
                    <span class="navbar-toggler-icon"></span>
                </button>
            </Authorized>
        </AuthorizeView>
        <AuthorizeView>
            <NotAuthorized>
                <div>
                    <a href="bff/login" class="btn btn-light me-3">Login</a>
                    <a href="/Signup" class="btn btn-outline-light">Sign up</a>
                </div>
                <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#collapsibleNavbar">
                    <span class="navbar-toggler-icon"></span>
                </button>
            </NotAuthorized>
        </AuthorizeView>
    </div>
</nav>
<div class="container" style="height:100%">
    <main style="height:100%">
        <article class="px-4" style="height:100%">
            @Body
        </article>
    </main>
</div>


<BlazoredToasts Position="ToastPosition.BottomCenter" IconType="IconType.FontAwesome"
                Timeout="3" SuccessIcon="fas fa-thumbs-up"
                ErrorIcon="fas fa-exclamation-triangle" ShowProgressBar="true" />


@code {

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; } = default!;

    protected override void OnAfterRender(bool firstRender)
    {
        if(firstRender)
        {
            State.StateChanged += StateChanged!;
        }
    }


    protected override async Task OnInitializedAsync()
    {
        var authState = await authenticationStateTask;
        var user = authState.User;
        if (user.Identity?.IsAuthenticated ?? false)
        {
            Dispatcher.Dispatch(new LoadOrganizationNameAction());
        }
    }

    public void StateChanged(object sender, EventArgs args)
    {
        InvokeAsync(StateHasChanged);
    }

    void IDisposable.Dispose()
    {
        State.StateChanged -= StateChanged!;
    }
}